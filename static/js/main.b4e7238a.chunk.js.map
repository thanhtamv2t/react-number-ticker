{"version":3,"sources":["../../src/components/TickerNumber.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["TickerNumber","num","index","useState","ticker","setTicker","height","setHeight","heightRef","useRef","arrNumber","useMemo","Array","props","useSpring","transform","Number","delay","useEffect","className","style","overflow","width","undefined","animated","key","Math","ref","number","splitText","stringifyNumber","containerClassName","styles","castItem","isNaN","parseInt","it","RandomAndFormatNumber","rndNumber","floor","random","Intl","NumberFormat","format","App","n","setN","onClick","fmNumber","ReactDOM","render","document","getElementById"],"mappings":"gSAQMA,EAAe,SAAC,G,IAAEC,QAAKC,UAC3B,EAA4BC,mBAA5B,GAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAA5B,GAAOG,EAAP,KAAeC,EAAf,KACMC,EAAYC,iBAAlB,MACMC,EAAsBC,mBAAQ,WAClC,MAAO,UAAIC,eAAJ,SAA2B,4BADpC,IAIMC,EAAQC,oBAAU,CACtBC,UAAW,eAAF,GAAiBC,UADJ,KAEtBC,MAAe,IAARf,IAUT,OAPAgB,qBAAU,WACR,EACEb,KACSG,EAAJ,SACLD,EAAUC,UAAVD,gBAED,CAACC,EAAWF,EANfY,IAQE,yBACEC,UAAU,mBACVC,MAAO,CAAEC,SAAF,SAAsBC,MAAtB,OAAqChB,OAAQA,QAAUiB,IAE5DjB,EAKA,kBAACkB,WAAD,KAAcJ,MAAOP,GAClBH,EAAA,KAAc,mBACb,yBAAKS,UAAU,MAAMM,IAAKC,eADb,OALjB,yBAAKP,UAAU,MAAMQ,IAAKnB,GAD3B,O,8CCxBmB,SAAC,G,IAAEoB,WAAQT,cACnC,MAAa,OAAO,KAEpB,IAEMU,GAFe,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAxB,YAEkBE,MAAlB,IAEMC,EAA6B,CAACZ,EAAWa,EAAZ,2BACzB,wBADyB,KAAnC,KAIA,OACE,+BAAKb,UAAWY,GACbF,EAAA,KAAc,cACb,IAAMI,EAAWjB,OAAjB,GACA,OAAIkB,MAAJ,GACS,oCAAgBT,IAAG,QAAUvB,GAApC,GAIA,2BACEuB,IAAG,kBACHxB,IAAKkC,SAASC,GACdlC,MAAOA,SC1BbmC,G,MAAwB,WAC5B,IAAMC,EAAYZ,KAAKa,MAAsB,IAAhBb,KAAKc,UAIlC,OAFiB,IAAIC,KAAKC,cAAeC,OAAOL,KAyBnCM,EApBH,WACV,MAAkBzC,oBAAS,kBAAKkC,OAAhC,mBAAOQ,EAAP,KAAUC,EAAV,KASA,OACE,8BACE,yBAAK3B,UAAU,oBACb,kBAAC,EAAD,CAAmBS,OAAM,WAAMiB,MAEjC,4BAAQE,QAXW,WACrB,IAAMC,EAAWX,IACjBS,EAAKE,KASH,eCvBNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b4e7238a.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { useSpring, animated } from 'react-spring'\n\ninterface TickerProps {\n  num: string | number\n  index: number\n}\n\nconst TickerNumber = ({ num, index }: TickerProps) => {\n  const [ticker, setTicker] = useState<string | number>(0)\n  const [height, setHeight] = useState<number | null>(0)\n  const heightRef = useRef<HTMLDivElement>(null)\n  const arrNumber: number[] = useMemo(() => {\n    return [...Array(10).fill(1)].map((_it, index) => index)\n  }, [])\n\n  const props = useSpring({\n    transform: `translateY(-${Number(ticker) * 10}%)`,\n    delay: index * 100\n  })\n\n  useEffect(() => {\n    if (height) {\n      setTicker(num)\n    } else if (heightRef.current) {\n      setHeight(heightRef.current.clientHeight)\n    }\n  }, [heightRef, height, num])\n  return (\n    <div\n      className='ticker-container'\n      style={{ overflow: 'hidden', width: '100%', height: height || undefined }}\n    >\n      {!height ? (\n        <div className='num' ref={heightRef}>\n          -\n        </div>\n      ) : (\n        <animated.div style={props}>\n          {arrNumber.map((it) => (\n            <div className='num' key={Math.random()}>\n              {it}\n            </div>\n          ))}\n        </animated.div>\n      )}\n    </div>\n  )\n}\n\nexport default TickerNumber\n","import * as React from 'react'\nimport TickerNumber from './components/TickerNumber'\nimport styles from './styles.module.css'\n\ninterface ReactNumberTickerProps {\n  number?: string | number\n  className?: string\n}\n\nconst ReactNumberTicker = ({ number, className }: ReactNumberTickerProps) => {\n  if (!number) return null\n\n  const stringifyNumber = number?.toString()\n\n  const splitText = stringifyNumber.split('')\n\n  const containerClassName: string = [className, styles.reactNumberTicker]\n    .filter((it) => it)\n    .join(' ')\n\n  return (\n    <div className={containerClassName}>\n      {splitText.map((it, index) => {\n        const castItem = Number(it)\n        if (isNaN(castItem)) {\n          return <React.Fragment key={`text-${index}`}>{it}</React.Fragment>\n        }\n\n        return (\n          <TickerNumber\n            key={`text-${index}-time`}\n            num={parseInt(it)}\n            index={index}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default ReactNumberTicker\n","import React from 'react'\nimport { useState } from 'react'\n\nimport ReactNumberTicker from 'react-number-ticker'\nimport 'react-number-ticker/dist/index.css'\n\nconst RandomAndFormatNumber = () => {\n  const rndNumber = Math.floor(Math.random() * 1000000);\n\n  const fmNumber = new Intl.NumberFormat().format(rndNumber)\n\n  return fmNumber\n}\n\nconst App = () => {\n  const [n, setN] = useState(()=> RandomAndFormatNumber())\n\n\n  const onChangeNumber = () => {\n    const fmNumber = RandomAndFormatNumber();\n    setN(fmNumber)\n  }\n  \n\n  return (\n    <main>\n      <div className=\"number-container\">\n        <ReactNumberTicker number={`$${n}`}/>\n      </div>\n      <button onClick={onChangeNumber}>Change me</button>\n    </main>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}